import React, { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import { modalState } from '../atoms/modalAtom'
import Head from 'next/head'
import { useRecoilState } from 'recoil'
import { getProviders, getSession, useSession } from 'next-auth/react'

import { db } from '../firebase'
import {
  collection,
  doc,
  onSnapshot,
  orderBy,
  query,
} from '@firebase/firestore'

import Modal from '../components/Modal'
import Sidebar from '../components/Sidebar'
// import Widgets from '../components/Widgets'
import Post from '../components/Post'
// import Comment from '../components/Comment'

import { ArrowLeftIcon } from '@heroicons/react/solid'
import Login from '../components/Login'
import { comment } from 'postcss'
import Comment from '../components/Comment'
import Widgets from '../components/Widgets'

export const getServerSideProps = async (context) => {
  const trendingResults = await fetch('https://jsonkeeper.com/b/NKEV').then(
    (res) => res.json()
  )
  const followResults = await fetch('https://jsonkeeper.com/b/WWMJ').then(
    (res) => res.json()
  )
  const providers = await getProviders()
  const session = await getSession(context)

  return {
    props: {
      trendingResults,
      followResults,
      providers,
      session,
    },
  }
}

const PostPage = ({ trendingResults, followResults, providers }) => {
  const { data: session } = useSession()
  const router = useRouter()
  const { id } = router.query
  const [isOpen, setIsOpen] = useRecoilState(modalState)
  const [post, setPost] = useState()
  const [comments, setComments] = useState([])

  useEffect(
    () =>
      onSnapshot(doc(db, 'posts', id), (snapshot) => {
        setPost(snapshot.data())
      }),
    [id]
  )

  useEffect(
    () =>
      onSnapshot(
        query(
          collection(db, 'posts', id, 'comments'),
          orderBy('timestamp', 'desc')
        ),
        (snapshot) => setComments(snapshot.docs)
      ),
    [id]
  )

  if (!session) return <Login providers={providers} />

  return (
    <>
      <Head>
        <title>
          {post?.username} on Twitter: &quot;{post?.text}&quot;
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-black min-h-screen flex max-w-[1260px] mx-auto">
        <Sidebar />
        <div className="flex-grow max-w-2xl text-white border-gray-700 border-x sm:ml-[73px] xl:ml-[270px]">
          <div className="flex items-center px-1.5 py-2 border-b border-gray-700 text-[#d9d9d9] font-semibold text-xl gap-x-4 sticky top-0 z-50 bg-black">
            <div
              className="flex items-center justify-center hoverAnimation w-9 h-9 xl:px-0"
              onClick={() => router.push('/')}
            >
              <ArrowLeftIcon className="h-5 text-white" />
            </div>
            Tweet
          </div>

          <Post id={id} post={post} postPage />
          {comments.length > 0 && (
            <div className="pb-72">
              {comments.map((comment) => (
                <Comment
                  key={comment.id}
                  id={comment.id}
                  comment={comment.data()}
                />
              ))}
            </div>
          )}
        </div>
        <Widgets
          trendingResults={trendingResults}
          followResults={followResults}
        />

        {isOpen && <Modal />}
      </main>
    </>
  )
}

export default PostPage
